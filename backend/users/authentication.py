from rest_framework import authentication, exceptions
from django.conf import settings
import jwt
from .models import User


class CustomJWTAuthentication(authentication.BaseAuthentication):
    """Authenticate users using the access tokens generated by LoginUser.

    Expects header: Authorization: Bearer <token>
    """

    def authenticate(self, request):
        auth = authentication.get_authorization_header(request).split()
        if not auth or auth[0].lower() != b'bearer':
            return None

        if len(auth) == 1:
            raise exceptions.AuthenticationFailed('Invalid token header. No credentials provided.')
        if len(auth) > 2:
            raise exceptions.AuthenticationFailed('Invalid token header. Token string should not contain spaces.')

        token = auth[1]
        try:
            token = token.decode()
        except Exception:
            raise exceptions.AuthenticationFailed('Invalid token encoding')

        secret = getattr(settings, 'JWT_ACCESS_SECRET', None)
        if not secret:
            raise exceptions.AuthenticationFailed('JWT access secret not configured')

        try:
            payload = jwt.decode(token, secret, algorithms=['HS256'])
        except jwt.ExpiredSignatureError:
            raise exceptions.AuthenticationFailed('Access token expired')
        except jwt.InvalidTokenError:
            raise exceptions.AuthenticationFailed('Invalid access token')

        user_id = payload.get('user_id')
        if not user_id:
            raise exceptions.AuthenticationFailed('Invalid token payload')

        user = User.objects.filter(id=user_id).first()
        if not user:
            raise exceptions.AuthenticationFailed('User not found')

        return (user, None)
